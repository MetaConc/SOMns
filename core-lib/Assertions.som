(* Copyright (c) 2015-2016 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)
class Assertions usingVmMirror: vmMirror usingKernel: kernel usingPlatform: platform = Value (
| private vmMirror  = vmMirror.
  private moduleClass = moduleClass.
  private Exception = kernel Exception.
  private Vector    = kernel Vector.
  private system    = platform system.
  private ObjectMirror  = platform mirrors ObjectMirror.
|

  vmMirror setAssertionModule: self.

)(

  public class ValueAssertions = Assertions <: Value(
  )(
    public getClass = (
      ^ Assertions.
    )
  )

  public class Assertions = ()(

    public class MessageProtocol = Assertions (
      (ObjectMirror reflecting: self) perform: #start
    )(
      public start  = (self subclassResponsibility)

      onSend: message do: aBlock = (
        vmMirror onSend: message do: aBlock.
      )

      onReceive: message do: aBlock = (
        vmMirror onReceive: message do: aBlock.
      )
    )

    public isMessage: msg = (
      ^vmMirror isMessage: msg.
    )

    public isSender: actor = (
      ^vmMirror isSender: actor.
    )

    public getMessage = (
      ^vmMirror getMessage: self.
    )

    public getMessageArgs = (
      ^vmMirror getMessageArguments: self.
    )

    public getSender = (
      ^vmMirror getSender: self.
    )

    public isPromiseMsg = (
      ^vmMirror isPromiseMessage: self.
    )

    public isPromiseComplete: aPromise = (
      ^vmMirror isPromiseComplete: aPromise.
    )

    public isResultUsed = (
      | pp |
      pp := createUntracedPromisePair.
      vmMirror isResultUsed: (pp resolver).
      ^ pp promise
    )

    public assert: aBlock = (
      assert: aBlock msg: 'Assertion failed'.
    )

    public assert: aBlock msg: msg = (
      assert: aBlock handler: [ 
        system error: msg. 
      ].
    )

    public assert: aBlock handler: anotherBlock = (
      | val |
      (vmMirror AssertionsEnabled: self) ifFalse: [^ nil].
      val := aBlock value.
      (isPromise: val) ifTrue: [
        val whenResolved: [ :r | r ifFalse: anotherBlock]
      ] ifFalse: [ 
        val ifFalse: anotherBlock
      ]
    )

    public assert: aBlock on: anotherActor = (
      assert: aBlock on: anotherActor msg: 'Assertion failed'.
    )

    public assert: aBlock on: anotherActor msg: msg = (
      assert: aBlock on: anotherActor handler: [ 
        system error: msg. 
      ].
    )

    public assert: aBlock on: anotherActor handler: anotherBlock = (
      | pp |
      (vmMirror AssertionsEnabled: self) ifFalse: [^ nil].

      pp := createUntracedPromisePair.

      (isPromise: anotherActor) ifTrue: [
        anotherActor whenResolved: [ :r |
          vmMirror assert: aBlock on: r res: (pp resolver).
        ]
      ] ifFalse: [
        vmMirror assert: aBlock on: anotherActor res: (pp resolver).
      ].

      pp promise whenResolved: [ :r | r ifFalse: anotherBlock]
    )

    public next: aBlock = (
      | pp |
      pp := createUntracedPromisePair.
      vmMirror assertNext: aBlock res: (pp resolver).
      ^ pp promise
    )

    public future: aBlock = (
      | pp |
      pp := createUntracedPromisePair.
      vmMirror assertFuture: aBlock res: (pp resolver).
      ^ pp promise
    )

    public globally: aBlock = (
      | pp |
      pp := createUntracedPromisePair.
      vmMirror assertGlobally: aBlock res: (pp resolver).
      ^ pp promise
    )

    public holds: aBlock until: anotherBlock = (
      | pp |
      pp := createUntracedPromisePair.
      vmMirror assert: aBlock until: anotherBlock res: (pp resolver).
      ^ pp promise
    )

    (* TODO find a better name for this method *)
    public assert: aBlock release: anotherBlock = (
      | pp |
      pp := createUntracedPromisePair.
      vmMirror assert: aBlock release: anotherBlock res: (pp resolver).
      ^ pp promise
    )


    public promise: a and: b = (
    | pp aval bval done |
    done := false.
    pp := createUntracedPromisePair.
    aval := a value.
    bval := b value.
    
    (isPromise: aval) ifTrue: [
      aval whenResolved: [:r | aval := r.
        done ifFalse: [
          aval ifTrue: [
            (isPromise: bval) ifFalse:[
              pp resolve: (aval and: bval).
              done := true.    
            ]
          ] ifFalse: [
            pp resolve: false.
            done := true.
          ] 
        ]
      ]
    ].
    
    (isPromise: bval) ifTrue: [
      bval whenResolved: [:r | bval := r.
        done ifFalse: [
          bval ifTrue: [
            (isPromise: aval) ifFalse:[
              pp resolve: (aval and: bval).
              done := true.    
            ]
          ] ifFalse: [
            pp resolve: false.
            done := true.
          ] 
        ]
      ]
    ].

    ((isPromise: aval) or: (isPromise: bval)) ifFalse:[
      pp resolve: (aval and: bval).
    ].

    ^ pp promise
    )

    public promise: a or: b = (
    | pp aval bval done |
    done := false.
    pp := createUntracedPromisePair.
    aval := a value.
    bval := b value.
    
    (isPromise: aval) ifTrue: [
      aval whenResolved: [:r | aval := r.
        done ifFalse: [
          aval ifTrue: [
            pp resolve: true.
            done := true.
          ] ifFalse: [
            (isPromise: bval) ifFalse:[
              pp resolve: (aval or: bval).
              done := true.    
            ]
          ]
        ]
      ]
    ].
    
    (isPromise: bval) ifTrue: [
      bval whenResolved: [:r | bval := r.
        done ifFalse: [
          bval ifTrue: [
            pp resolve: true.
            done := true.
          ] ifFalse: [
            (isPromise: aval) ifFalse:[
              pp resolve: (aval or: bval).
              done := true.    
            ]
          ]
        ]
      ]
    ].

    ((isPromise: aval) or: (isPromise: bval)) ifFalse:[
      pp resolve: (aval or: bval).
    ].

    ^ pp promise
    )

    public promise: a implies: b = (
    | pp aval bval done |
    done := false.
    pp := createUntracedPromisePair.
    aval := a value.
    bval := b value.
    
    (isPromise: aval) ifTrue: [
      aval whenResolved: [:r | aval := r.
        done ifFalse: [
          aval ifTrue: [
            (isPromise: bval) ifFalse:[
              pp resolve: bval.
              done := true.    
            ]
          ] ifFalse: [
            pp resolve: true.
            done := true.
          ] 
        ]
      ]
    ].
    
    (isPromise: bval) ifTrue: [
      bval whenResolved: [:r | bval := r.
        done ifFalse: [
          (isPromise: aval) ifFalse:[
            pp resolve: ((aval and: bval) or: (aval not)).
            done := true.    
          ]
        ]
      ]
    ].

    ((isPromise: aval) or: (isPromise: bval)) ifFalse:[
      pp resolve: ((aval and: bval) or: (aval not)).
    ].

    ^ pp promise
    )

    public not: a = (
    | pp aval |  
    pp := createUntracedPromisePair.
    aval := a value.

    (isPromise: aval) ifTrue: [
      aval whenResolved: [:r | pp resolve: (r not)]
    ] ifFalse: [
      pp resolve: (aval not)
    ].
    
    ^ pp promise
    )

    public isPromise: obj = (
      ^ (ObjectMirror reflecting: obj) className = 'Promise'
    )
    
    public class = (
      ^ moduleClass.
    )
  )

  public class RemoteAssertion new: target = Assertions (
    | target = target. |
  )(
    public perform: selector = (
      ^ (ObjectMirror reflecting: target) perform: selector.
    )

    public self = (
      ^ target.
    )
  )

  public instantiateRemoteAssertion: target = (
    ^ RemoteAssertion new: target.
  )
)
