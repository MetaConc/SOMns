class FileTests usingPlatform: platform testFramework: minitest = Value (
| private TestContext = minitest TestContext.
  private AsyncTestContext = minitest AsyncTestContext.
  private actors      = platform actors.
  private Exception   = platform kernel Exception.
  private NotAValue   = platform kernel NotAValue.
  private Vector      = platform kernel Vector.
  private Array       = platform kernel Array.
  private ObjectMirror = platform mirrors ObjectMirror.
  private errorTestMessage = 'test exception 1'.
  private Files = platform files.
  private fdes = Files FileDescriptor.
  private fpath = Files FilePath.
  private fpat = Files FilePattern.
|
)(
  public class BasicFileTests = TestContext (
    | path |
    path:: (fpath currentDirectory / 'tests' / 'java' / 'som' / 'files') pattern.
  )(
    public testUtils=(
      |a b|
      a:: fpath for: (path + '/test/A').
      assert: a exists.
      assert: (a size = 3644).
      assert: a lastModified <> nil.
      b:: (fpath for: (a containingDirectory pattern)). 
      assert: b entries size = 3.
    )

    public testCreateDeleteFile = (
      |f|
      f:: fpath for: (path + '/temp/A').
      (fpath for: (f containingDirectory pattern)) createDirectoryIfFail: [:r| assert: false].
      assert: (f exists not).
      f open: #readwrite ifFail: [:r| assert: false message: 'should not happen'].
      assert: (f exists).
      f deleteFileIfFail: [:r |].
      assert: (f exists not).
    )

    public testCreateDeleteDirectory = (
      |f|
      f:: fpath for: (path + '/temp/A').
      assert: (f exists not).
      f createDirectoryIfFail: [:r| assert: false].
      assert: (f exists).
      f deleteDirectoryIfFail: [:r |].
      assert: (f exists not).
    )

    public testReadWrite=(
      |f d|
      f:: fpath for: (path + '/tmp').
      assert: (f exists not).
      d:: f open: #readwrite ifFail: [:r | assert: false].

      assert: d size = 0.

      0 to: 255 do:[ :i|
        d buffer at: (i+1) put: (i - 128).
      ].

      d write: 256 at: 0 ifFail: [:r|].
      assert: d size = 256.
      assert: 256 = (d readAt: 0 ifFail: [:r |]).

      0 to: 255 do:[ :i|
        assert: ((d buffer at: (i+1)) = (i - 128)).
      ].

      d close.
      
      f deleteFileIfFail: [:r |].
      assert: (f exists not).
    )

    public testPaths= (
      |f cnt|
      cnt:: 0.
      f:: fpat for: (path + '/test/*').
      f pathsDo: [ :p |
        assert: p exists.
        cnt:: cnt + 1.
      ].
      assert: cnt = 3.
    )

    public testMove =(
      |f g|
      f:: fpath for: (path + '/tmp').
      f open: #readwrite ifFail: [:r|].

      f copyNamed: 'tmp2'.
      g:: fpath for: (path + '/tmp2').
      assert: g exists && f exists.
      assert: g size = f  size.

      g deleteFileIfFail: [:r|].
      assert: g exists not.

      f moveAs: g.
      assert: (g exists) && (f exists not).

      g deleteFileIfFail: [:r|].
    )
  ) : (
    TEST_CONTEXT = ()
  )

)